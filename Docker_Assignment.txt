1) Install Docker, either on your native OS or on a VM. 
Make sure it runs. type "docker -v" to check if it's installed.
Solution : 
docker -v
r version 20.10.0, build 7287ab3Docker version 20.10.0, build 7287ab3

 docker --help

Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default "/root/.docker")
  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and
                           default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level ("debug"|"info"|"warn"|"error"|"fatal") (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default "/root/.docker/ca.pem")
      --tlscert string     Path to TLS certificate file (default "/root/.docker/cert.pem")
      --tlskey string      Path to TLS key file (default "/root/.docker/key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  app*        Docker App (Docker Inc., v0.9.1-beta3)
  builder     Manage builds
  checkpoint  Manage checkpoints
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

Run 'docker COMMAND --help' for more information on a command.

 docker images --help

Usage:  docker images [OPTIONS] [REPOSITORY[:TAG]]

List images

Options:
  -a, --all             Show all images (default hides intermediate images)
      --digests         Show digests
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print images using a Go template
      --no-trunc        Don't truncate output
  -q, --quiet           Only show image IDs

docker ps --help

Usage:  docker ps [OPTIONS]

List containers

Options:
  -a, --all             Show all containers (default shows just running)
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print containers using a Go template
  -n, --last int        Show n last created containers (includes all states) (default -1)
  -l, --latest          Show the latest created container (includes all states)
      --no-trunc        Don't truncate output
  -q, --quiet           Only display container IDs
  -s, --size            Display total file sizes

2) Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub
Solution : 

docker pull nginx
Using default tag: latest
latest: Pulling from library/nginx
a330b6cecb98: Pull complete
5ef80e6f29b5: Pull complete
f699b0db74e3: Pull complete
0f701a34c55e: Pull complete
3229dce7b89c: Pull complete
ddb78cb2d047: Pull complete
Digest: sha256:c442ff5a3d9f6dc92dd8aee388ece42d965e002805e3edaaff34e79d8ee6d0a4
Status: Downloaded newer image for nginx:latest
docker.io/library/nginx:latest

3) List all the available images in your machine/vm, make sure you see recently pulled image in the list.
Solution :
docker images
REPOSITORY   TAG       IMAGE ID       CREATED             SIZE
nginx        latest    822b7ec2aaf2   About an hour ago   133MB

4) Find out the "Full" ImageId of the image that you pulled and write it below.
Solution : 
 docker images -q
822b7ec2aaf2

5) Create a container of your image
Solution : 
docker run -d -p 8080:80 --name MyNginx 822b7ec2aaf2
999afd7153c3174759dfab38bc17f586b8506d39dfcc6efa66cb2d6ec2245cfa

6) List all the running containers
Solution :
docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                  NAMES
999afd7153c3   822b7ec2aaf2   "/docker-entrypoint.…"   57 seconds ago   Up 56 seconds   0.0.0.0:8080->80/tcp   MyNginx

7) List all the running and stopped containers
Solution :

docker ps -a
CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                  NAMES
999afd7153c3   822b7ec2aaf2   "/docker-entrypoint.…"   4 minutes ago   Up 4 minutes   0.0.0.0:8080->80/tcp   MyNginx

8) Find out the "Full" containerId of the container and write it below.
Solution : 

docker inspect 999afd7153c3

        "Id": "999afd7153c3174759dfab38bc17f586b8506d39dfcc6efa66cb2d6ec2245cfa"

9) Find out how many image layers are used to build this image
Solution : 

docker inspect 822b7ec2aaf2
 "Layers": [
                "sha256:d000633a56813933cb0ac5ee3246cf7a4c0205db6290018a169d7cb096581046",
                "sha256:63b5f2c0d071d1ac41fe869b0f2321c3adec53d8d51b4a03017d865c38dd41f8",
                "sha256:875b5b50454b905c1046c99ab65e403bf27400bf9c96c157332cda2538698dc2",
                "sha256:ed94af62a494fbea70c27afcedea4c303817196b50e8dd98b5be88cd514aab01",
                "sha256:8e58314e4a4fbd97b70bed2b4c5f4b2911ff7f3e3ee310be89fab1120768d533",
                "sha256:d47e4d19ddecb22dc95d641e9c29192a2d13e8506bc60d1c8f6452685ed63634"
            ]
10) Get the Apache Tomcat 7 server image from the docker hub
Solution : 
 docker pull tomcat:7.0
7.0: Pulling from library/tomcat
0bc3020d05f1: Pull complete
a110e5871660: Pull complete
83d3c0fa203a: Pull complete
a8fd09c11b02: Pull complete
96ebf1506065: Pull complete
26b72ffca293: Pull complete
0bffa2ea17aa: Pull complete
d880cebcc7a6: Pull complete
d19ab8039b36: Pull complete
5057492dc495: Pull complete
Digest: sha256:f7d37d248d0eacec1e5995736234c9c22155626fcb27ea3ead13b9db24e698f7
Status: Downloaded newer image for tomcat:7.0
docker.io/library/tomcat:7.0

11) Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.
Solution : 
docker run -d -p 8080:80 --name MyTomcat 9dfd74e6bc2f
51f033cfee6c3cb42d6cfe87748e231af226389792d927dd14d0f5acf9add960

12) Find out what is the IP Address of the Apache Tomcat Container that it is running on
Solution :
docker inspect MyTomcat : http://192.168.0.13:8080/

13) Which Port it is using?
Solution : 
"HostPort": "8080"

14) Try to access the Tomcat's home page from your machine/vm
Solution :
http://192.168.0.13:8080

15) What is the disk size of Apache Tomcat image?
Solution : 
533MB

16) Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
Solution :
[10:12 AM] Nakade, Priti
    "Env": [
                "PATH=/usr/local/tomcat/bin:/usr/local/openjdk-8/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "JAVA_HOME=/usr/local/openjdk-8",
                "LANG=C.UTF-8",
                "JAVA_VERSION=8u292",
                "CATALINA_HOME=/usr/local/tomcat",
                "TOMCAT_NATIVE_LIBDIR=/usr/local/tomcat/native-jni-lib",
                "LD_LIBRARY_PATH=/usr/local/tomcat/native-jni-lib",
                "GPG_KEYS=05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 61B832AC2F1C5A90F0F9B00A1C506407564C17A3 713DA88BE50911535FE716F5208B0AB1D63011C7 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23",
                "TOMCAT_MAJOR=7",
                "TOMCAT_VERSION=7.0.109",
                "TOMCAT_SHA512=612e830913bf1401bc9540e2273e465b0ee7ef63750a9969a80f1e9da9edb4888aa621fcc6fa5ba23cff94a40e91eb97e3f969b8064dabd49b2d0ea29e59b57e"
            ]


17) Find out which port is exposed for tomcat?
Solution :
8085

18) Run multiple conntainers of tomcat on different port and access it's home page.
Solution : 
Done

19)Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.
Solution : 
docker pull ubuntu:18.04
18.04: Pulling from library/ubuntu
e4ca327ec0e7: Pull complete
Digest: sha256:9bc830af2bef73276515a29aa896eedfa7bdf4bdbc5c1063b4c457a4bbb8cd79
Status: Downloaded newer image for ubuntu:18.04
docker.io/library/ubuntu:18.04

 docker pull ubuntu:20.04
20.04: Pulling from library/ubuntu
35807b77a593: Pull complete
Digest: sha256:9d6a8699fb5c9c39cf08a0871bd6219f0400981c570894cd8cbea30d3424a31f
Status: Downloaded newer image for ubuntu:20.04
docker.io/library/ubuntu:20.04

20) Run the container of ubuntu in attached mode
Solution : 
docker run -it --name MyUbuntu1 ubuntu:18.04

21) Run the container of another ubuntu in detached mode
Soluion : 

docker run -it --name MyUbuntu2 ubuntu:20.04

22) Check how many ubuntu containers are running and stopped
Solution : 

MyUbuntu2 is running and MyUbuntu1 is stop

23) Is the tomcat container running? If no, start one
Solution : 
docker start Mytomcat
     
     Mytomcat

24) Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).
Solution : docker logs MyTomcat

25) Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.
Solution : 

 docker start MyUbuntu1
MyUbuntu1
 docker exec -it MyUbuntu1 bash
root@00305a42017e:/#


26) Login as root user in ubuntu container
Solution : 
docker exec -it MyUbuntu1 bash
root@00305a42017e:/# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@00305a42017e:/#

27) Create a file with any name in root directory
Solution : 
root@00305a42017e:/# touch mahima
root@00305a42017e:/# ls
bin  boot  dev  etc  home  lib  lib64  mahima  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@00305a42017e:/#

28) . Install software of your choice in ubuntu container using "apt-get install"
Solution  :
 apt-get update
Get:1 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]
Get:2 http://archive.ubuntu.com/ubuntu bionic InRelease [242 kB]
Get:3 http://security.ubuntu.com/ubuntu bionic-security/multiverse amd64 Packages [26.7 kB]
Get:4 http://security.ubuntu.com/ubuntu bionic-security/restricted amd64 Packages [543 kB]
Get:5 http://security.ubuntu.com/ubuntu bionic-security/main amd64 Packages [2295 kB]
Get:6 http://security.ubuntu.com/ubuntu bionic-security/universe amd64 Packages [1426 kB]
Get:7 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]
Get:8 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB]
Get:9 http://archive.ubuntu.com/ubuntu bionic/multiverse amd64 Packages [186 kB]
Get:10 http://archive.ubuntu.com/ubuntu bionic/main amd64 Packages [1344 kB]
Get:11 http://archive.ubuntu.com/ubuntu bionic/universe amd64 Packages [11.3 MB]
Get:12 http://archive.ubuntu.com/ubuntu bionic/restricted amd64 Packages [13.5 kB]
Get:13 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages [2731 kB]
Get:14 http://archive.ubuntu.com/ubuntu bionic-updates/multiverse amd64 Packages [34.4 kB]
Get:15 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 Packages [2200 kB]
Get:16 http://archive.ubuntu.com/ubuntu bionic-updates/restricted amd64 Packages [575 kB]
Get:17 http://archive.ubuntu.com/ubuntu bionic-backports/universe amd64 Packages [11.4 kB]
Get:18 http://archive.ubuntu.com/ubuntu bionic-backports/main amd64 Packages [11.3 kB]
Fetched 23.2 MB in 3s (7710 kB/s)
Reading package lists... Done

29) Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
Solution : 
exit

30) Check if the ubuntu container is running.
Solution : 
Yes

31)Create a new ubuntu container out of the same image as that previous container in attached mode.
Solution : 
docker run -it --name MyUbuntu3 ubuntu:18.04

32) Login as a root user
Solution : Done

33) Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.
Solution : 
Not Visible

$ docker run -it --name MyUbuntu3 ubuntu:18.04
root@bc141420b5c8:/# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@bc141420b5c8:/#

docker kill MyUbuntu3
     MyUbuntu3

34) Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.
Solution : 
Yes

35) Create an Image out of the existing container.
Solution : 
 docker commit bc141420b5c8 mahimapimple/ubuntu-mod:1.0
sha256:de5303477df6284f9dd45f847fbad94864d5d33e40a9142127c003dd4977fa89

36) Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container
Solution : 

Yes

37) Do you have running tomcat container? If yes, Stop it and kill all tomcat container
Solution : 
[node1] (local) root@192.168.0.13 ~
$ docker stop MyTomcat
MyTomcat
[node1] (local) root@192.168.0.13 ~
$ docker rm MyTomcat
MyTomcat

38) Create an index.html file with following code in it:-

<h1>This is Tomcat Container</h1>

Now, Start a ubuntu container, login into the ubuntu, install nginx, access nginx's home page from the container,

Now, come out of the ubuntu container and replace the existing index.html page of nginx with above index.html page that you created, Now access the nginx server from host machine, it should display the index.html that you have created.
Solution : 

39) type below command:-

docker images --help

Now, try to run command that proves the concept of following three options:-

1. -a

2. -f

3. -q

write atleast 1 command using each option above and prove their concepts as described in the --help.

Solution : 
 docker images --help

Usage:  docker images [OPTIONS] [REPOSITORY[:TAG]]

List images

Options:
  -a, --all             Show all images (default hides intermediate images)
      --digests         Show digests
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print images using a Go template
      --no-trunc        Don't truncate output
  -q, --quiet           Only show image IDs

 docker images -a (display all images)
REPOSITORY                TAG       IMAGE ID       CREATED          SIZE
mahimapimple/ubuntu-mod   1.0       de5303477df6   12 minutes ago   63.1MB
nginx                     latest    822b7ec2aaf2   3 hours ago      133MB
ubuntu                    20.04     fb52e22af1b0   3 days ago       72.8MB
ubuntu                    18.04     54919e10a95d   3 days ago       63.1MB
tomcat                    7.0       9dfd74e6bc2f   2 months ago     533MB

docker images -f

 docker images -q (displays image ids)
de5303477df6
822b7ec2aaf2
fb52e22af1b0
54919e10a95d
9dfd74e6bc2f

40) type below command:-

docker ps --help

Now, try to run command that proves the concept of following six options:-

1. -a

2. -f

3. -q

4. -n

5. -l

6. -s

write atleast 1 command using each option above and prove their concepts as described in the --help.
Solution : 
[node1] (local) root@192.168.0.13 ~
$ docker images --help

Usage:  docker images [OPTIONS] [REPOSITORY[:TAG]]

List images

Options:
  -a, --all             Show all images (default hides intermediate images)
      --digests         Show digests
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print images using a Go template
      --no-trunc        Don't truncate output
  -q, --quiet           Only show image IDs
[node1] (local) root@192.168.0.13 ~
$ docker images -q (it will display all image ids)
de5303477df6
822b7ec2aaf2
fb52e22af1b0
54919e10a95d
9dfd74e6bc2f
[node1] (local) root@192.168.0.13 ~

docker ps -l
CONTAINER ID   IMAGE                         COMMAND   CREATED          STATUS                      PORTS     NAMES
a75db00d73a0   mahimapimple/ubuntu-mod:1.0   "bash"    12 minutes ago   Exited (0) 10 minutes ago             Mahima

41) Type below command:-

docker --help

you will various sections of commands apart from options like "Managemnet Commands" and "Commands".

Write some texts below describing the use of "Management Commands".

Use each command mentioned below and prove its concepts as described in the --help desription. write what you have understood from the output of the command after its successful execution.

1. cp

2. create

3. export

4. history

5. info

6. login

7. logout

8. rename

9. save

10. stats

11. top
Solution : 
Usage:  docker [OPTIONS] COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default "/root/.docker")
  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and
                           default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level ("debug"|"info"|"warn"|"error"|"fatal") (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default "/root/.docker/ca.pem")
      --tlscert string     Path to TLS certificate file (default "/root/.docker/cert.pem")
      --tlskey string      Path to TLS key file (default "/root/.docker/key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  app*        Docker App (Docker Inc., v0.9.1-beta3)
  builder     Manage builds
  checkpoint  Manage checkpoints
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

Run 'docker COMMAND --help' for more information on a command.

42) 